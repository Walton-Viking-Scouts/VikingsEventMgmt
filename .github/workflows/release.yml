name: 🚀 Release and Deploy

on:
  release:
    types: [published]
  # Note: No longer trigger on all tags to avoid conflicts with CI workflow
  # The CI workflow handles patch tags, this workflow handles GitHub Releases

permissions:
  contents: write

env:
  SENTRY_HOST: https://walton-vikings.sentry.io
  SENTRY_ORG: walton-vikings
  SENTRY_PROJECT: viking-event-mgmt
  SENTRY_RELEASE_PREFIX: vikings-eventmgmt-mobile
  SENTRY_URL: https://sentry.io

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.sentry-release.outputs.version }}
      release-name: ${{ steps.sentry-release.outputs.release-name }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run tests
        env:
          VITE_API_URL: https://site--vikings-event-management--ytnrhtcfzsqn.code.run
          VITE_OAUTH_CLIENT_ID: test_client_id
        run: |
          npm run test:run
          npm run lint

      - name: 🔨 Build with Sentry integration
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: |
          # Extract version for build process
          VERSION="${{ github.ref_name }}"
          VERSION=${VERSION#v}  # Remove 'v' prefix if present
          SENTRY_RELEASE="${{ env.SENTRY_RELEASE_PREFIX }}@$VERSION"

          echo "Building release: $VERSION"
          echo "Sentry release: $SENTRY_RELEASE"

          # Export for Vite plugin to use consistent release naming
          export SENTRY_RELEASE="$SENTRY_RELEASE"

          npm run build

      - name: 📤 Create and finalize Sentry release
        id: sentry-release
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_URL: ${{ env.SENTRY_URL }}
        run: |
          set -euo pipefail  # Bash safety flags

          # Extract version and create consistent release name (strip 'v' prefix)
          VERSION="${{ github.ref_name }}"
          VERSION=${VERSION#v}  # Remove 'v' prefix if present
          RELEASE="${{ env.SENTRY_RELEASE_PREFIX }}@$VERSION"

          # Export clean version and release name to GitHub Actions environment for reuse
          echo "CLEAN_VERSION=$VERSION" >> $GITHUB_ENV
          echo "RELEASE_NAME=$RELEASE" >> $GITHUB_ENV

          # Also expose as step outputs for cross-job and expression context usage
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "release-name=$RELEASE" >> $GITHUB_OUTPUT

          echo "Processing Sentry release: $RELEASE"

          # Check if release already exists (created by Vite plugin)
          if npx @sentry/cli releases info "$RELEASE" > /dev/null 2>&1; then
            echo "Release $RELEASE already exists, skipping creation"
          else
            echo "Creating new release: $RELEASE"
            npx @sentry/cli releases new "$RELEASE"
          fi

          # Verify source maps were uploaded
          echo "Checking source maps..."
          if npx @sentry/cli releases files "$RELEASE" list | grep -qE '\.map(\.gz)?$'; then
            echo "Source maps found in release"
          else
            echo "No source maps found, uploading manually..."
            if [ -d "./dist" ] && [ "$(find ./dist -name '*.map' | wc -l)" -gt 0 ]; then
              echo "Found source maps in dist directory, uploading..."
              npx @sentry/cli sourcemaps inject ./dist
              npx @sentry/cli sourcemaps upload --release "$RELEASE" --url-prefix "~/" ./dist
            else
              echo "Warning: No source map files found in ./dist directory"
              find ./dist -type f \( -name "*.js" -o -name "*.map" \) | head -10
            fi
          fi

          # Set commits and finalize
          npx @sentry/cli releases set-commits "$RELEASE" --auto
          npx @sentry/cli releases finalize "$RELEASE"

          echo "Sentry release $RELEASE completed successfully"

      - name: 📝 Update package.json version
        run: |
          # Extract version from tag and update package.json
          VERSION="${{ github.ref_name }}"
          VERSION=${VERSION#v}  # Remove 'v' prefix if present
          echo "Updating package.json to version: $VERSION"
          npm version "$VERSION" --no-git-tag-version --allow-same-version

      - name: ℹ️ Deployment Status
        run: |
          echo "ℹ️ This is an enhanced tracking release workflow"
          echo "🚀 Deployment was already handled by the CI workflow on PR merge"
          echo "📊 This workflow provides additional Sentry release verification and deployment tracking"
          echo ""
          echo "Deployment status:"
          echo "  ✅ Frontend: Already deployed via CI workflow"
          echo "  ✅ Backend: Already deployed via CI workflow"
          echo "  📊 Sentry: Enhanced release tracking in progress"

      - name: 🔍 Verify deployment
        env:
          PROD_FRONTEND_URL: ${{ vars.PROD_FRONTEND_URL || 'https://vikingeventmgmt.onrender.com' }}
          PROD_BACKEND_HEALTH_URL: ${{ vars.PROD_BACKEND_HEALTH_URL || 'https://site--vikings-event-management--ytnrhtcfzsqn.code.run/health' }}
        run: |
          echo "⏳ Waiting for deployments to complete..."
          sleep 60

          # Function to verify URL with retry logic
          verify_url() {
            local url="$1"
            local name="$2"
            local max_attempts=5
            local attempt=1
            local wait_time=10

            echo "🔍 Verifying $name deployment at: $url"

            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt/$max_attempts..."
              if curl -f -L -s --max-time 30 "$url" > /dev/null; then
                echo "✅ $name is responding"
                return 0
              fi

              if [ $attempt -lt $max_attempts ]; then
                echo "⚠️ $name verification failed, retrying in ${wait_time}s..."
                sleep $wait_time
                wait_time=$((wait_time * 2))  # Exponential backoff
              fi
              attempt=$((attempt + 1))
            done

            echo "❌ $name verification failed after $max_attempts attempts"
            return 1
          }

          # Verify frontend
          verify_url "$PROD_FRONTEND_URL" "Frontend" || exit 1

          # Verify backend
          verify_url "$PROD_BACKEND_HEALTH_URL" "Backend" || exit 1

          echo "✅ All services verified successfully"

      - name: 🐙 Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## 🔄 Changes
            
            Release ${{ github.ref_name }} deployed via GitHub Actions
            
            ## 🚀 Deployment Status
            
            - ✅ Frontend: Deployed via CI workflow on PR merge
            - ✅ Backend: Deployed via CI workflow on PR merge  
            - ✅ Source Maps: Additional verification and deployment tracking
            - ✅ Version Synchronization: Complete
            
            ## 🔗 Sentry Release
            
            View detailed error tracking and performance monitoring in Sentry:
            ${{ env.SENTRY_HOST }}/organizations/${{ env.SENTRY_ORG }}/releases/${{ steps.sentry-release.outputs.release-name }}/
            
            ## 📊 Issue Resolution

            This release may resolve the following Sentry issues:
            - Check the Sentry release page for automatic issue resolution
            - Issues first seen after the previous release will be marked as resolved

            ## 🔧 Release Process

            This release was deployed using the enhanced GitHub Actions workflow that ensures:
            - Version synchronization between package.json and deployed code
            - Source maps uploaded before deployment for accurate error tracking
            - Atomic deployment to both frontend and backend infrastructure
          draft: false
          prerelease: false

  deploy-notification:
    needs: release
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: 🚀 Mark deployment in Sentry
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_URL: ${{ env.SENTRY_URL }}
        run: |
          set -euo pipefail  # Bash safety flags

          # Use job output for consistent release name access
          npx @sentry/cli releases deploys "${{ needs.release.outputs.release-name }}" new -e production
