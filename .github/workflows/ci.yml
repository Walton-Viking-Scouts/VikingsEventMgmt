name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:run

      - name: Run linter
        run: npm run lint

  # Build Test
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 7

  # E2E Tests with Cypress Cloud - DISABLED (needs configuration fixes)
  # e2e-tests:
  #   runs-on: ubuntu-latest
  #   needs: [unit-tests, build]
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       browser: [chrome, firefox, edge]
  #       containers: [1, 2] # Parallel execution
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: 'npm'

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Download build artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: build-files
  #         path: dist/

  #     - name: Run Cypress tests
  #       uses: cypress-io/github-action@v6
  #       with:
  #         start: npm run dev
  #         wait-on: 'http://localhost:3001'
  #         wait-on-timeout: 120
  #         browser: ${{ matrix.browser }}
  #         record: true
  #         parallel: true
  #         group: 'E2E Tests - ${{ matrix.browser }}'
  #         tag: '${{ github.event_name }}'
  #       env:
  #         CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_PROJECT_ID }}
  #         # Force API mocking in CI/CD to prevent real API calls
  #         CYPRESS_ENABLE_API_MOCKING: 'true'
  #         CYPRESS_CI: 'true'
  #         # Use test environment variables to prevent real API access
  #         VITE_API_URL: 'http://localhost:3001/mock-api'
  #         NODE_ENV: 'test'

  # Mobile Build Test (iOS)
  mobile-build:
    runs-on: macos-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build web assets
        run: npm run build

      - name: Setup Capacitor
        run: |
          npx cap sync ios
          # Note: Full iOS build would require Apple Developer certificates

  # Deployment (if needed)
  deploy:
    runs-on: ubuntu-latest
    needs: [unit-tests, build]
    # Run for PRs targeting main (preview) and pushes to main (production)
    if: ${{ github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main') }}
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: üìù Set environment-aware version for Sentry tracking
        run: |
          echo "üî¢ Setting version based on deployment environment..."
          
          # Export GH_TOKEN for gh CLI commands
          export GH_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          
          # Get the actual PR title (not commit message)
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # For PR events, use the PR title directly
            PR_TITLE="${{ github.event.pull_request.title }}"
            echo "üìã Using PR title from pull_request event: $PR_TITLE"
          else
            # For push events, find associated PR via GitHub API
            echo "üîç Push event detected, searching for associated PR..."
            COMMIT_SHA="${{ github.sha }}"
            
            # Use GitHub API to find PRs associated with this commit
            API_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/commits/${COMMIT_SHA}/pulls" \
              | jq -r '.[0].title // empty' 2>/dev/null || echo "")
            
            if [ -n "$API_RESPONSE" ] && [ "$API_RESPONSE" != "null" ]; then
              PR_TITLE="$API_RESPONSE"
              echo "üìã Found associated PR title: $PR_TITLE"
            else
              # Fallback to commit message if no PR found
              PR_TITLE="${{ github.event.head_commit.message }}"
              echo "üìã No associated PR found, using commit message: $PR_TITLE"
            fi
          fi
          
          # Export PR_TITLE for use in subsequent steps
          echo "PR_TITLE=$PR_TITLE" >> $GITHUB_ENV
          
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # Preview deployment - use PR-specific version with commit SHA
            BASE_VERSION=$(node -p "require('./package.json').version")
            SHORT_SHA="${{ github.sha }}"
            SHORT_SHA="${SHORT_SHA:0:7}"
            NEW_VERSION="${BASE_VERSION}-pr-${{ github.event.number }}-${SHORT_SHA}"
            DEPLOYMENT_TYPE="preview"
            echo "üîç Preview deployment detected"
            echo "Base version: $BASE_VERSION"
            echo "Commit SHA: ${SHORT_SHA}"
            echo "Preview version: $NEW_VERSION"
          else
            # Production deployment (main branch) - bump version properly
            echo "üöÄ Production deployment detected"
            
            # Configure git for automated commits (only for production)
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            
            # Use the PR title that was extracted and exported earlier
            echo "üìã Using extracted PR title: $PR_TITLE"
            
            # Look for version pattern like v1.2.3 in PR title
            EXPLICIT_VERSION=$(echo "$PR_TITLE" | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+' || echo "")
            
            if [ -n "$EXPLICIT_VERSION" ]; then
              # Explicit version found in PR title - use it directly
              CLEAN_VERSION=$(echo "$EXPLICIT_VERSION" | sed 's/v//')
              echo "üìå Explicit version specified in PR title: $EXPLICIT_VERSION"
              echo "Setting version directly to: $CLEAN_VERSION"
              
              # Set NEW_VERSION immediately for explicit versions
              NEW_VERSION="$CLEAN_VERSION"
              VERSION_TYPE="explicit"
              
              # Update package.json to match explicit version
              npm version "$CLEAN_VERSION" --no-git-tag-version --allow-same-version
              
              echo "‚úÖ Explicit version set: $NEW_VERSION"
            else
              # No explicit version - derive base from git tags for idempotency
              echo "üìù No explicit version in PR title, computing patch bump from git tags"
              echo "PR titles can include version like: 'feat: new feature v1.2.0'"
              
              # Get base version from latest git tag (more reliable than package.json)
              LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
              BASE_VERSION=$(echo "$LATEST_TAG" | sed 's/v//')
              echo "üè∑Ô∏è Latest git tag: $LATEST_TAG (base: $BASE_VERSION)"
              
              # Compute next patch version
              IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
              NEXT_PATCH=$((PATCH + 1))
              NEW_VERSION="${MAJOR}.${MINOR}.${NEXT_PATCH}"
              VERSION_TYPE="patch"
              
              echo "üîß Computed next patch version: $NEW_VERSION"
              
              # Update package.json to computed version
              npm version "$NEW_VERSION" --no-git-tag-version --allow-same-version
            fi
            
            DEPLOYMENT_TYPE="production"
            echo "Production version: $NEW_VERSION"
          fi
          
          # Export version and deployment type for subsequent steps
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "DEPLOYMENT_TYPE=$DEPLOYMENT_TYPE" >> $GITHUB_ENV
          echo "‚úÖ Version set: $NEW_VERSION (${DEPLOYMENT_TYPE})"
          
          # Create tags and releases only for production deployments
          if [ "$DEPLOYMENT_TYPE" = "production" ]; then
            # Check if tag already exists before creating (idempotent)
            if git rev-parse --verify "refs/tags/v${NEW_VERSION}" >/dev/null 2>&1; then
              echo "üè∑Ô∏è Tag v${NEW_VERSION} already exists, skipping tag creation"
              TAG_CREATED="false"
            else
              # Create and push git tag for Sentry tracking
              echo "üè∑Ô∏è Creating new tag v${NEW_VERSION}"
              git tag "v${NEW_VERSION}"
              git push origin "v${NEW_VERSION}"
              TAG_CREATED="true"
              echo "‚úÖ Git tag v${NEW_VERSION} created and pushed"
            fi
            
            # Create GitHub releases based on version type (only if tag was created)
            if [ "$TAG_CREATED" = "true" ]; then
              if [ "$VERSION_TYPE" = "patch" ]; then
                # Patch versions: Just tag for Sentry tracking (no GitHub release)
                echo "‚úÖ Production version tagged: v${NEW_VERSION} (patch)"
              elif [ "$VERSION_TYPE" = "explicit" ]; then
                # Explicit versions: Create GitHub Release for visibility
                gh release create "v${NEW_VERSION}" \
                  --title "Release v${NEW_VERSION}" \
                  --notes "Explicit version release v${NEW_VERSION}. This release was created with an explicit version specified in the PR title. Sentry Tracking: Version v${NEW_VERSION}, Type: Explicit. All errors will be attributed to this release. Generated with Claude Code." \
                  --latest
                
                echo "‚úÖ Production version released: v${NEW_VERSION} (explicit from PR title)"
              else
                # Other version types: Create GitHub Release
                gh release create "v${NEW_VERSION}" \
                  --title "Release v${NEW_VERSION}" \
                  --notes "Auto-generated release v${NEW_VERSION}. Sentry Tracking: Version v${NEW_VERSION}, Type: ${VERSION_TYPE}. All errors will be attributed to this release. Generated with Claude Code." \
                  --latest
                
                echo "‚úÖ Production version released: v${NEW_VERSION} (${VERSION_TYPE})"
              fi
            else
              echo "‚ÑπÔ∏è Tag already exists, skipping GitHub release creation"
            fi
          else
            echo "üîç Preview deployment - no tags or releases created"
          fi

      - name: üì§ Create Sentry release for error tracking
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: walton-vikings
          SENTRY_PROJECT: viking-event-mgmt
        run: |
          # Use the environment-aware version set in previous step
          RELEASE="vikings-eventmgmt-mobile@$NEW_VERSION"
          ENVIRONMENT="$DEPLOYMENT_TYPE"
          
          echo "üìä Creating Sentry release: $RELEASE"
          echo "üåç Environment: $ENVIRONMENT"
          
          if [ -n "$SENTRY_AUTH_TOKEN" ]; then
            # Create Sentry release with environment
            npx @sentry/cli releases new "$RELEASE" || echo "Release may already exist"
            
            # Upload source maps if they exist
            if [ -d "./dist" ] && [ "$(find ./dist -name '*.map' | wc -l)" -gt 0 ]; then
              echo "üìÇ Uploading source maps for error tracking..."
              npx @sentry/cli sourcemaps inject ./dist
              npx @sentry/cli sourcemaps upload --release "$RELEASE" --url-prefix "~/" ./dist
            fi
            
            # Set commits and finalize
            npx @sentry/cli releases set-commits "$RELEASE" --auto || echo "Failed to set commits"
            npx @sentry/cli releases finalize "$RELEASE" || echo "Release may already be finalized"
            
            # Mark deployment in the appropriate environment
            npx @sentry/cli releases deploys "$RELEASE" new -e "$ENVIRONMENT"
            
            echo "‚úÖ Sentry release $RELEASE created for $ENVIRONMENT environment"
          else
            echo "‚ö†Ô∏è SENTRY_AUTH_TOKEN not configured, skipping Sentry release"
          fi

      - name: Deploy to production
        if: env.DEPLOYMENT_TYPE == 'production'
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
        run: |
          echo "üöÄ Deploying to production..."
          
          # Deploy to Render.com via webhook
          if [ -n "$RENDER_DEPLOY_HOOK" ]; then
            echo "Triggering Render deployment via webhook..."
            response=$(curl -s -o /dev/null -w "%{http_code}" -X POST "$RENDER_DEPLOY_HOOK")
            if [ "$response" = "200" ] || [ "$response" = "201" ]; then
              echo "‚úÖ Render deployment triggered successfully"
            else
              echo "‚ùå Render deployment failed with status: $response"
              exit 1
            fi
          else
            echo "‚ö†Ô∏è RENDER_DEPLOY_HOOK not configured, skipping deployment"
            echo "Please configure RENDER_DEPLOY_HOOK secret in GitHub repository settings"
          fi