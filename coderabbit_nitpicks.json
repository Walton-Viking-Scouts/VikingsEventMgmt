[
  {
    "body": "_‚ö†Ô∏è Potential issue_ | _üü° Minor_\n\n**Fix Markdown heading style (MD036).**\n\nChange emphasis to a proper heading.\n\nApply this diff:\n\n```diff\n-**Step-by-Step Guide to Replace Complex Sync System with Scout-Appropriate Simplicity**\n+## Step-by-Step Guide to Replace Complex Sync System with Scout-Appropriate Simplicity\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>üìù Committable suggestion</summary>\n\n> ‚ÄºÔ∏è **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n## Step-by-Step Guide to Replace Complex Sync System with Scout-Appropriate Simplicity\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>üß∞ Tools</summary>\n\n<details>\n<summary>ü™õ markdownlint-cli2 (0.18.1)</summary>\n\n3-3: Emphasis used instead of a heading\n\n(MD036, no-emphasis-as-heading)\n\n</details>\n\n</details>\n\n<details>\n<summary>ü§ñ Prompt for AI Agents</summary>\n\n```\ndocs/architecture/migration-implementation-guide.md around line 3: the line is\nusing bold emphasis for what should be a document heading (MD036); replace the\nbolded text with a proper Markdown heading (prepend with an appropriate number\nof # characters, e.g., \"## Step-by-Step Guide to Replace Complex Sync System\nwith Scout-Appropriate Simplicity\") so it is recognized as a heading rather than\nemphasized text.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:poseidon:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
    "line": 3,
    "path": "docs/architecture/migration-implementation-guide.md"
  },
  {
    "body": "_‚ö†Ô∏è Potential issue_ | _üü° Minor_\n\n**Time‚Äëcomplexity claim is incorrect**\n\nConcurrency reduces wall‚Äëclock time but overall complexity remains O(n) calls; it‚Äôs not O(1).\n\n\n```diff\n-**After:**\n-- Concurrent API calls: `O(1)` time complexity for network calls\n+-**After:**\n+- Concurrent API calls: `O(n)` operations with reduced wall‚Äëclock time via bounded parallelism\n```\n\n\n> Committable suggestion skipped: line range outside the PR's diff.\n\n<details>\n<summary>ü§ñ Prompt for AI Agents</summary>\n\n```\nIn docs/architecture/optimized-sync-performance.md around lines 106 to 108, the\nclaim that concurrent API calls are O(1) is incorrect; update the bullets to\nstate that total work remains O(n) network calls but they can be executed in\nparallel to reduce wall‚Äëclock latency. Replace \"Concurrent API calls: `O(1)`\ntime complexity for network calls\" with a line like \"Concurrent API calls:\n`O(n)` total network calls, executed in parallel to reduce wall‚Äëclock time\" and\nkeep the other bullets (API call count, error handling) consistent with that\nexplanation.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:poseidon:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
    "line": 108,
    "path": "docs/architecture/optimized-sync-performance.md"
  },
  {
    "body": "_‚ö†Ô∏è Potential issue_ | _üü° Minor_\n\n**Seed missing mocks in beforeEach**\n\nEnsure getByIndex exists and STORES is available on the mocked service.\n\n```diff\n   beforeEach(() => {\n     vi.clearAllMocks();\n@@\n-    IndexedDBService.getDB = vi.fn().mockResolvedValue(mockDB);\n+    IndexedDBService.getDB = vi.fn().mockResolvedValue(mockDB);\n+    IndexedDBService.getByIndex = IndexedDBService.getByIndex || vi.fn();\n+    IndexedDBService.STORES = IndexedDBService.STORES || { CURRENT_ACTIVE_TERMS: 'current_active_terms' };\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>üìù Committable suggestion</summary>\n\n> ‚ÄºÔ∏è **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n    // Mock the getDB method to return an object with database methods\n    const mockDB = {\n      get: vi.fn(),\n      put: vi.fn(),\n      getAll: vi.fn(),\n      delete: vi.fn(),\n    };\n\n    IndexedDBService.getDB = vi.fn().mockResolvedValue(mockDB);\n    IndexedDBService.getByIndex = IndexedDBService.getByIndex || vi.fn();\n    IndexedDBService.STORES = IndexedDBService.STORES || { CURRENT_ACTIVE_TERMS: 'current_active_terms' };\n\n    // Keep the original method mocks for backwards compatibility\n    IndexedDBService.get = mockDB.get;\n    IndexedDBService.put = mockDB.put;\n    IndexedDBService.getAll = mockDB.getAll;\n    IndexedDBService.delete = mockDB.delete;\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>ü§ñ Prompt for AI Agents</summary>\n\n```\nIn src/shared/services/storage/__tests__/currentActiveTermsService.test.js\naround lines 24 to 39, the test setup mocks IndexedDBService but omits\ngetByIndex and STORES which other code expects; update the beforeEach mock to\nadd a getByIndex: vi.fn() (and wire it to mockDB if needed) and add a STORES\nobject (or import/replicate the expected STORES keys) onto IndexedDBService so\ntests can call IndexedDBService.getByIndex and reference IndexedDBService.STORES\nwithout throwing.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
    "line": 39,
    "path": "src/shared/services/storage/__tests__/currentActiveTermsService.test.js"
  },
  {
    "body": "_‚ö†Ô∏è Potential issue_ | _üü° Minor_\n\n**Normalise key type on delete to match put/get.**\n\nDeletes may fail if sectionId is a number while keys were stored as strings.\n\nApply this diff:\n\n```diff\n-      await IndexedDBService.delete(\n+      await IndexedDBService.delete(\n         IndexedDBService.STORES.CURRENT_ACTIVE_TERMS,\n-        sectionId,\n+        String(sectionId),\n       );\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>üìù Committable suggestion</summary>\n\n> ‚ÄºÔ∏è **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n      await IndexedDBService.delete(\n        IndexedDBService.STORES.CURRENT_ACTIVE_TERMS,\n        String(sectionId),\n      );\n\n      logger.info('Deleted current active term', {\n        sectionId,\n      }, LOG_CATEGORIES.DATABASE);\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>ü§ñ Prompt for AI Agents</summary>\n\n```\nIn src/shared/services/storage/currentActiveTermsService.js around lines 109 to\n116, the delete call uses sectionId which may be a number while put/get use\nstring keys, causing deletes to fail; convert/normalize the key to a string\n(e.g., String(sectionId) or sectionId.toString()) when calling\nIndexedDBService.delete so it matches the stored key type, and use the same\nnormalized value in the logger metadata.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
    "line": 116,
    "path": "src/shared/services/storage/currentActiveTermsService.js"
  },
  {
    "body": "_‚ö†Ô∏è Potential issue_ | _üü° Minor_\n\n**Add language specifier to fenced code block**\n\nThe static analysis tool correctly identifies a missing language specifier for the fenced code block.\n\n\n```diff\n-```\n+```text\n ‚úì 15 tests passing\n```\n\n<details>\n<summary>üß∞ Tools</summary>\n\n<details>\n<summary>ü™õ markdownlint-cli2 (0.18.1)</summary>\n\n112-112: Fenced code blocks should have a language specified\n\n(MD040, fenced-code-language)\n\n</details>\n\n</details>\n\n<details>\n<summary>ü§ñ Prompt for AI Agents</summary>\n\n````\nIn src/shared/services/storage/IMPLEMENTATION_SUMMARY.md around line 112, the\nfenced code block is missing a language specifier; update the opening fence to\ninclude a language (e.g., \"text\") so it reads ```text, leaving the block content\nunchanged, to satisfy the static analysis tool.\n````\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:armadillo -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
    "line": 112,
    "path": "src/shared/services/storage/IMPLEMENTATION_SUMMARY.md"
  },
  {
    "body": "_‚ö†Ô∏è Potential issue_ | _üü° Minor_\n\n**Use a defined logging category with the shared logger.**\n\nAll of the new logger calls here use `LOG_CATEGORIES.DATA_SERVICE`, but the shared `logger.js` currently exposes no such key (see src/shared/services/utils/logger.js). That means we pass `undefined` as the category, so these entries lose their structured classification. Please either add the category constant or reuse an existing one such as `LOG_CATEGORIES.SYNC`.\n\n\nApply this diff (or adjust the category used here):\n\n```diff\n export const LOG_CATEGORIES = {\n   APP: 'app',\n   API: 'api',\n   AUTH: 'auth',\n+  DATA_SERVICE: 'data-service',\n   NAVIGATION: 'navigation',\n   USER_ACTION: 'user-action',\n   PERFORMANCE: 'performance',\n   OFFLINE: 'offline',\n   SYNC: 'sync',\n   COMPONENT: 'component',\n   HOOK: 'hook',\n   ERROR: 'error',\n };\n```\n\nBased on src/shared/services/utils/logger.js.\n\n<!-- suggestion_start -->\n\n<details>\n<summary>üìù Committable suggestion</summary>\n\n> ‚ÄºÔ∏è **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\nexport const LOG_CATEGORIES = {\n  APP: 'app',\n  API: 'api',\n  AUTH: 'auth',\n  DATA_SERVICE: 'data-service',\n  NAVIGATION: 'navigation',\n  USER_ACTION: 'user-action',\n  PERFORMANCE: 'performance',\n  OFFLINE: 'offline',\n  SYNC: 'sync',\n  COMPONENT: 'component',\n  HOOK: 'hook',\n  ERROR: 'error',\n};\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>ü§ñ Prompt for AI Agents</summary>\n\n```\nIn src/shared/services/data/eventsService.js around lines 28-132 the logger\ncalls use LOG_CATEGORIES.DATA_SERVICE which doesn't exist in\nsrc/shared/services/utils/logger.js; either add a DATA_SERVICE key to the\nexported LOG_CATEGORIES constant in src/shared/services/utils/logger.js (e.g.,\nDATA_SERVICE: 'data_service') and re-run tests, or change all\nLOG_CATEGORIES.DATA_SERVICE usages in this file to an existing category such as\nLOG_CATEGORIES.SYNC so the shared logger receives a defined category.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:sabertoothed -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
    "line": 132,
    "path": "src/shared/services/data/eventsService.js"
  },
  {
    "body": "_‚ö†Ô∏è Potential issue_ | _üü° Minor_\n\n**Update the metadata to the actual revision date.**\n\nThe front-matter still says `last_updated: \"2025-01-22\"`, yet the body announces the new three-service architecture that just landed. Please bump the date (and version if needed) so readers aren't misled about when this schema documentation was last revised.\n\n<details>\n<summary>ü§ñ Prompt for AI Agents</summary>\n\n```\nIn docs/reference/database-schema.md around lines 5 to 8, the front-matter still\nshows last_updated: \"2025-01-22\" which is stale given the three-service\narchitecture changes; update last_updated to the current revision date (e.g.,\n\"2025-09-28\") and also bump the version to a new patch/minor (e.g., \"2.1.0\" or\n\"2.0.1\") to reflect the documented changes, ensuring the date and version in the\nYAML front-matter match the actual revision.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:triton:sabertoothed -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
    "line": 8,
    "path": "docs/reference/database-schema.md"
  }
]
