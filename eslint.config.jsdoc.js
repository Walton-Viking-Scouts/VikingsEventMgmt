import js from '@eslint/js';
import jsdoc from 'eslint-plugin-jsdoc';

export default [
  js.configs.recommended,
  {
    files: ['src/**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2022,
      sourceType: 'module',
      parserOptions: {
        ecmaFeatures: {
          jsx: true,
        },
      },
      globals: {
        console: 'readonly',
        window: 'readonly',
        document: 'readonly',
        navigator: 'readonly',
        localStorage: 'readonly',
        sessionStorage: 'readonly',
        fetch: 'readonly',
        React: 'readonly',
        process: 'readonly',
      },
    },
    plugins: {
      jsdoc,
    },
    settings: {
      react: {
        version: 'detect',
      },
    },
    rules: {
      // Disable unused vars completely for JSDoc-only lint - focus on documentation
      'no-unused-vars': 'off',
      // Focus only on JSDoc validation
      'jsdoc/require-jsdoc': ['error', {
        require: {
          FunctionDeclaration: true,
          MethodDefinition: true,
          ClassDeclaration: true,
          ArrowFunctionExpression: false,
          FunctionExpression: false,
        },
        contexts: [
          'ExportNamedDeclaration > VariableDeclaration > VariableDeclarator:has(ArrowFunctionExpression)',
          'ExportDefaultDeclaration > ArrowFunctionExpression',
          'ExportDefaultDeclaration > FunctionExpression',
          'ExportNamedDeclaration > FunctionDeclaration',
        ],
        exemptEmptyConstructors: true,
        exemptEmptyFunctions: true,
        enableFixer: true,
        checkConstructors: false,
        checkGetters: false,
        checkSetters: false,
      }],
      'jsdoc/require-description': ['error', {
        contexts: [
          'FunctionDeclaration', 
          'MethodDefinition', 
          'ClassDeclaration',
          'ExportNamedDeclaration > VariableDeclaration > VariableDeclarator:has(ArrowFunctionExpression)',
          'ExportDefaultDeclaration > ArrowFunctionExpression',
          'ExportDefaultDeclaration > FunctionExpression',
        ],
        exemptedBy: ['type', 'private', 'internal'],
      }],
      'jsdoc/require-param': 'error',
      'jsdoc/require-param-description': 'error',
      'jsdoc/require-returns': ['error', {
        exemptedBy: ['constructor', 'abstract'],
        contexts: ['ArrowFunctionExpression', 'FunctionExpression', 'FunctionDeclaration', 'MethodDefinition'],
        forceRequireReturn: false,
        forceReturnsWithAsync: false,
      }],
      'jsdoc/require-returns-description': 'error',
      'jsdoc/check-param-names': 'error',
      'jsdoc/check-tag-names': ['error', {
        definedTags: ['component', 'hook', 'example', 'since', 'deprecated', 'todo', 'fixme'],
      }],
      'jsdoc/check-types': 'error',
      'jsdoc/no-undefined-types': ['error', {
        definedTypes: [
          'React',
          'ReactNode',
          'ReactElement',
          'JSX',
          'HTMLElement',
          'Element',
          'Event',
          'EventTarget',
          'Promise',
          'Array',
          'Object',
          'Function',
          'Date',
          'RegExp',
          'Error',
          'Map',
          'Set',
          'WeakMap',
          'WeakSet',
          'Symbol',
          'BigInt',
          'Component',
          'FC',
          'FunctionComponent',
          'RefObject',
          'MutableRefObject',
          'Dispatch',
          'SetStateAction',
          'ChangeEvent',
          'FormEvent',
          'MouseEvent',
          'KeyboardEvent',
          'TouchEvent',
          'SyntheticEvent',
        ],
      }],
      'jsdoc/valid-types': 'error',
      'jsdoc/check-syntax': 'error',
    },
  },
  {
    ignores: [
      'src/**/*.test.{js,jsx}',
      'src/test/**/*',
      'cypress/**/*',
      'dist',
      'node_modules',
      'coverage',
      '**/*.config.js',
      '**/*.skip.js',
      'docs/api',
    ],
  },
];